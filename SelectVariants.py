# Author: Liping Hou
# Email:  houliping@gmail.com
# Nov. 7th, 2014

import argparse
import sys

parser = argparse.ArgumentParser(description="Select variants based on MAF and functional categories")
parser.add_argument('input', help="input file generated by 'table_annovar.pl'")
parser.add_argument('output', help='output file with all selected variants included')
parser.add_argument('--genemodel', help='which gene model to use (default: ensembl)', choices=['ensembl','refSeq'], default='ensembl')
parser.add_argument('--maf', help='variants with MAF > N will be excluded (default: 0.01)', metavar="N", type=float, default=0.01)
parser.add_argument('--splicing', action='store_true', help='use this flag to select splicing variants')
parser.add_argument('--frameshift', action='store_true', help='use this flag to select frameshift-indels')
parser.add_argument('--nonsynonymous', action='store_true', help='use this flag to select non-synonymous variants')
parser.add_argument('--stopgain', action='store_true', help='use this flag to select stop-gain variants')
parser.add_argument('--stoploss', action='store_true', help='use this flag to select stop-loss variants')
args = parser.parse_args()


def selectVariant(input, output, gene_model, maf_threshold, splicing, frameshift, nonsynonymous, stop_gain=True, stop_loss=True):
    data = open(input)
    out = open(output, 'w')
    firstline = next(data)
    out.write(firstline)
    header = firstline.strip().split('\t')
    if gene_model == 'ensembl':
        func = header.index('Func.ensGene')
        exonic = header.index('ExonicFunc.ensGene')
    else:
        func = header.index('Func.refGene')
        exonic = header.index('ExonicFunc.refGene')
    popfreq = header.index('popfreq_max')
    esp_ea = header.index('esp6500si_ea')
    esp_all = header.index('esp6500si_all')
    g1000_eur = header.index('1000g2012apr_eur')
    g1000_all = header.index('1000g2012apr_all')
    def af(x):
        if len(x) == 0:
            return(0.0)
        else:
            return(float(x))
    if splicing or frameshift or nonsynonymous or stop_gain or stop_loss:
        pass
    else:
        print("Error: please specify at least one functional category")
        print()
        print("Use 'python3 SelectVariants.py -h' to show the help message")
        print()
        sys.exit()
    try:
        splicing
    except NameError:
        splicing = False
    try:
        frameshift
    except NameError:
        frameshift = False
    try:
        nonsynonymous
    except NameError:
        nonsynonymous = False
    try:
        stop_gain
    except NameError:
        stop_gain = False
    try:
        stop_loss
    except NameError:
        stop_loss = False
    for line in data:
        annovar = line.strip('\n').split('\t')
        if af(annovar[popfreq]) > maf_threshold or af(annovar[esp_ea]) > maf_threshold or af(annovar[esp_all]) > maf_threshold or af(annovar[g1000_eur]) > maf_threshold or af(annovar[g1000_all]) > maf_threshold:
            pass
        else:
            if splicing and annovar[func] == 'splicing':
                out.write(line)
            elif frameshift and (annovar[exonic] == 'frameshift deletion' or annovar[exonic] == 'frameshift insertion' or annovar[exonic] == 'frameshift substitution'): 
                out.write(line)
            elif nonsynonymous and annovar[exonic] == 'nonsynonymous SNV':
                out.write(line)
            elif stop_gain and annovar[exonic] == 'stopgain':
                out.write(line)
            elif stop_loss and annovar[exonic] == 'stoploss':
                out.write(line)
            else:
                pass

selectVariant(args.input, args.output, args.genemodel, args.maf, args.splicing, args.frameshift, args.nonsynonymous, args.stopgain, args.stoploss)
